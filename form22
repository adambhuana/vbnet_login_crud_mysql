Imports System.Data.Odbc
Imports System.Security.Cryptography

Public Class Form22
    Public Shared sukseslogin As String
    Private Sub Form22_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Me.CenterToScreen()
        sukseslogin = ""
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles btnmasuk.Click
        Call koneksinya()
        If txtusername.Text = "" Or txtpassword.Text = "" Then
            MessageBox.Show("Please Complete All Fields", "CRUD", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
        Else
            Try
                'Dim plainText As String 
                Dim password As String = txtpassword.Text
                Dim wrapper As New Simple3Des(password)
                Dim cipherText As String = wrapper.EncryptData(password)

                Label3.Text = "Hasil Enkrip:" + cipherText
                Dim plainText As String = wrapper.DecryptData(cipherText)
                'MsgBox("The plain text is: " & plainText)
                Label4.Text = "Hasil Dekrip:" + plainText
                cmd = New OdbcCommand("select * from tblakun where username = '" & txtusername.Text & "' and password = '" & cipherText & "'", conn)
                dr = cmd.ExecuteReader
                dr.Read()
                If Not dr.HasRows Then
                    MessageBox.Show("Login failed Check your username, password And status")
                Else
                    sukseslogin = dr.Item("username")
                    MessageBox.Show("Sukses Login")
                    Me.Hide()
                    Form10.Show()
                    My.Forms.Form10.Label7.Text = sukseslogin

                End If

            Catch ex As Exception
                MessageBox.Show(ex.Message)
            End Try
        End If
    End Sub



    Private Sub txtusername_TextChanged(sender As Object, e As EventArgs) Handles txtusername.TextChanged

    End Sub

    Private Sub Form12_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing
        MsgBox("Thank You")
        e.Cancel = False
        Form23.Close()
    End Sub
End Class
Public NotInheritable Class Simple3Des
    Private TripleDes As New TripleDESCryptoServiceProvider
    Private Function TruncateHash(
    ByVal key As String,
    ByVal length As Integer) As Byte()

        Dim sha1 As New SHA1CryptoServiceProvider

        ' Hash the key.
        Dim keyBytes() As Byte =
            System.Text.Encoding.Unicode.GetBytes(key)
        Dim hash() As Byte = sha1.ComputeHash(keyBytes)

        ' Truncate or pad the hash.
        ReDim Preserve hash(length - 1)
        Return hash
    End Function
    Sub New(ByVal key As String)
        ' Initialize the crypto provider.
        TripleDes.Key = TruncateHash(key, TripleDes.KeySize \ 8)
        TripleDes.IV = TruncateHash("", TripleDes.BlockSize \ 8)
    End Sub
    Public Function EncryptData(
    ByVal plaintext As String) As String

        ' Convert the plaintext string to a byte array.
        Dim plaintextBytes() As Byte =
            System.Text.Encoding.Unicode.GetBytes(plaintext)

        ' Create the stream.
        Dim ms As New System.IO.MemoryStream
        ' Create the encoder to write to the stream.
        Dim encStream As New CryptoStream(ms,
            TripleDes.CreateEncryptor(),
            System.Security.Cryptography.CryptoStreamMode.Write)

        ' Use the crypto stream to write the byte array to the stream.
        encStream.Write(plaintextBytes, 0, plaintextBytes.Length)
        encStream.FlushFinalBlock()

        ' Convert the encrypted stream to a printable string.
        Return Convert.ToBase64String(ms.ToArray)
    End Function
    Public Function DecryptData(
    ByVal encryptedtext As String) As String

        ' Convert the encrypted text string to a byte array.
        Dim encryptedBytes() As Byte = Convert.FromBase64String(encryptedtext)

        ' Create the stream.
        Dim ms As New System.IO.MemoryStream
        ' Create the decoder to write to the stream.
        Dim decStream As New CryptoStream(ms,
            TripleDes.CreateDecryptor(),
            System.Security.Cryptography.CryptoStreamMode.Write)

        ' Use the crypto stream to write the byte array to the stream.
        decStream.Write(encryptedBytes, 0, encryptedBytes.Length)
        decStream.FlushFinalBlock()

        ' Convert the plaintext stream to a string.
        Return System.Text.Encoding.Unicode.GetString(ms.ToArray)
    End Function
End Class
